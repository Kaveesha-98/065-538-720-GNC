// x6 = M
//loading stack pointer
lui x15, 64
addi x15, x15, -1
jal x0, START
MUL:addi x8, x0, 16
addi x7, x0, 0
slli x5, x5, 16
LOOP:andi x9, x6, 1
beq x7, x9, SHIFT
beq x7, x0, MINUS
add x6, x5, x6
jal x0, SHIFT
MINUS:sub x6, x6, x5
SHIFT:add x7, x0, x9
srai x6, x6, 1
addi x8, x8, -1
bne x8, x0, LOOP
jalr x0, 0(x1)
START:add x6, x0, x0
//x5 <= M
addi x5, x6, 0
lbu x7, 0(x6)
lbu x8, 1(x6)
slli x8, x8, 8
//x7 <= #rows
or x7, x7, x8
lbu x8, 2(x6)
lbu x9, 3(x6)
slli x9, x9, 8
//x8 <= #columns
or x8, x8, x9
//x6 <= index
addi x6, x6, 4
//x13 <= index - columns
sub x13, x6, x8
//x14 <= index + columns
add x14, x6, x8
//x7 <= rows - 2
//addi x7, x7, -2
//x8 <= columns - 2
addi x8, x8, -2
//x9 <= #pixels (without margines)
//MUL x9, x7, x8
//Multiplying
sw x5, -4(x15)
sw x6, -8(x15)
sw x7, -12(x15)
sw x8, -16(x15)
sw x9, -20(x15)
sw x10, -24(x15)
sw x11, -28(x15)
addi x15, x15, -28
addi x5, x7, 0
addi x6, x8, 0
jal x1, MUL
addi x9, x6, 0
addi x15, x15, 28
lw x5, -4(x15)
lw x6, -8(x15)
lw x7, -12(x15)
lw x8, -16(x15)
lw x10, -24(x15)
lw x11, -28(x15)
//finish multipy
addi x8, x8, 2
//addi x8, x8, 2
//x20 <= counter of pixels
addi x20, x9, 0
//x21 <= counter of cols
addi x6, x5, 4
lbu x12, 0(x6)
addi x6, x6, 1
lbu x11, 0(x6)
addi x21, x8, -2
//enable sobel diff
SECOND:lbu x10, 1(x6)
sb x16, 0(x6)
addi x20, x20, -1
addi x21, x21, -1
addi x6, x6, 1
beq x20, x0, END
bne x21, x0, SECOND
addi x6, x6, 2
lbu x11, -1(x6)
lbu x10, 0(x6)
addi x21, x8, -2
jal x0, SECOND
END:add x0, x0, x0
addi x6, x5, 5
lb x11, 0(x6)
add x6, x6, x8
lb x10, 0(x6)
//x8 <= cols - 2
addi x8, x8, -2
sub x9, x9, x8
sub x9, x9, x8
addi x20, x9, 0
addi x8, x8, 2
addi x21, x7, -2
//enable sobel filter
FIRST:add x14, x6, x8
lb x10, 0(x14)
sb x16, 0(x6)
add x6, x6, x8
addi x20, x20, -1
addi x21, x21, -1
beq x20, x0, NEXT
bne x21, x0, FIRST
sb x0, 0(x6)
addi x6, x13, 0
addi x13, x6, 1
lb x11, 0(x6)
sb x0, 0(x6)
add x6, x6, x8
lb x10, 0(x6)
addi x21, x7, -2
jal x0, FIRST
NEXT:sb x0, 0(x6)
