//testing register type
//losding testing values to registers
jal x0, START
FACT:addi x11, x0, 1
NEXTNUM:bne x10, x0, MUL
jalr x0, 0(x1)
MUL:addi x5, x10, 0
addi x6, x11, 0
LOOP4:andi x7, x5, 1
bne x7, x0, NOTADD
add x11, x11, x6
NOTADD:slli x11, x11, 1
srli x5, x5, 1
beq x5, x0, MULFINISH
srli x6, x6, 1
jal x0, LOOP4
MULFINISH:addi x10, x10, -1
jal x0, NEXTNUM
//-------------------------------------------
START:lui x1, 0xAAAAB
addi x1, 0xAAA
lui x2, 0x55555
addi x2, 0x555
//testing and
and x3, x1, x2
and x0, x1, x2
//testing or
or x4, x1, x2
or x0, x1, x2
//testing sra------------------------------------------------
addi x5, x0, 1
sra x6, x1, x5
LOOP1:slli x5, x5, 1
sra x6, x1, x5
bne x0, x5, LOOP1
//testing srl------------------------------------------
addi x5, x0, 1
srl x6, x1, x5
LOOP2:slli x5, x5, 1
srl x6, x1, x5
bne x5, x0, LOOP2
xor x7, x1, x2
xor x0, x1, x2
srli x8, x4, 1
//testing slt, sltu-------------------------------------
addi x9, x0, 1
slli x9, x9, 30
xori x10, x9, -1
sltu x11, x9, x10
slt x12, x9, x10
addi x10, x10, 1
sltu x11, x9, x10
slt x12, x9, x10
addi x10, x10, 1
sltu x11, x9, x10
slt x12, x9, x10
//testing sll---------------------
addi x5, x0, 1
sll x13, x1, x5
LOOP3:slli x5, x5, 1
sll x13, x1, x5
bne x5, x0, LOOP3
//testing add, substract---------------------------------------
add x14, x1, x2
sub x15, x1, x2
add x14, x2, x1
sub x15, x2, x1
//testing srai, srli, slli-------------------------------------
srai x16, x1, 8
srli x17, x1, 8
slli x18, x1, 8
srai x16, x1, 16
srli x17, x1, 16
slli x18, x1, 16
srai x16, x1, 24
srli x17, x1, 24
slli x18, x1, 24
//testing andi, ori, xori, sltui, slt, addi--------------------
andi x19, x1, 2047
ori x20, x1, 2047
xori x21, x1, 2047
sltiu x22, x1, 2047
slti x23, x1, 2047
addi x24, x1, 2047
andi x19, x1, -2048
ori x20, x1, -2048
xori x21, x1, -2048
sltiu x22, x1, -2048
slti x23, x1, -2048
addi x24, x1, -2048
//testing stores-----------------------------------------------
lui x25, 0x01234
addi x25, x25, 0x567
lui x26, 0x89ABD
addi x26, x26, 0xDEF
lui x27, 0xFEDCC
addi x27, 0xA98
lui x28, 0x76543
addi x28, x28, 0x210
addi x29, x0, 1024
sw x25, 0(x29)
sw x26, 4(x29)
sw x27, 8(x29)
sh x28, 6(x29)
sh x27, 4(x29)
sh x26, 2(x29)
sb x25, 1(x29)
sb x26, 0(x29)
sb x27, -1(x29)
sb x25, -2(x29)
sh x26, -4(x29)
sw x27, -8(x29)
sw x25, -4(x29)
sh x26, -2(x29)
sb x27, -1(x29)
//testing branches using a factorial procedure
//Loading value to find factorial
addi x10, x0, 5
jal x1, FACT
