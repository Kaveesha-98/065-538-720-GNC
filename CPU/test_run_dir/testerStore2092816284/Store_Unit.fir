;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Store_Unit : 
  module Store_Unit : 
    input clock : Clock
    input reset : UInt<1>
    output io : {mem_write_data : UInt<8>, mem_write_address : UInt<32>, mem_write : UInt<1>, STORE_READY : UInt<1>, flip DATA_IN : UInt<1>, flip STORE_SIZE : UInt<2>, flip ADDRESS_IN : UInt<1>, flip store_data : UInt<32>, flip store_address : UInt<32>}
    
    reg store_data_buffer : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Store_Unit.scala 21:40]
    reg store_data_size_buffer : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Store_Unit.scala 22:45]
    reg store_data_buffer_address : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Store_Unit.scala 23:48]
    reg storing : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Store_Unit.scala 25:30]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Store_Unit.scala 28:31]
    node _T = eq(storing, UInt<1>("h00")) @[Store_Unit.scala 31:22]
    when _T : @[Store_Unit.scala 31:34]
      io.mem_write_address <= store_data_buffer_address @[Store_Unit.scala 32:38]
      node _T_1 = bits(store_data_buffer, 7, 0) @[Store_Unit.scala 33:55]
      io.mem_write_data <= _T_1 @[Store_Unit.scala 33:35]
      io.mem_write <= UInt<1>("h01") @[Store_Unit.scala 34:30]
      node _T_2 = shr(store_data_buffer, 8) @[Store_Unit.scala 35:56]
      store_data_buffer <= _T_2 @[Store_Unit.scala 35:35]
      node _T_3 = add(store_data_buffer_address, UInt<1>("h01")) @[Store_Unit.scala 36:72]
      node _T_4 = tail(_T_3, 1) @[Store_Unit.scala 36:72]
      store_data_buffer_address <= _T_4 @[Store_Unit.scala 36:43]
      node _T_5 = eq(store_data_size_buffer, UInt<2>("h03")) @[Store_Unit.scala 37:45]
      when _T_5 : @[Store_Unit.scala 37:53]
        stateReg <= UInt<1>("h00") @[Store_Unit.scala 38:34]
        storing <= UInt<1>("h01") @[Store_Unit.scala 39:33]
        skip @[Store_Unit.scala 37:53]
      else : @[Store_Unit.scala 40:18]
        node _T_6 = add(store_data_size_buffer, UInt<1>("h01")) @[Store_Unit.scala 41:74]
        node _T_7 = tail(_T_6, 1) @[Store_Unit.scala 41:74]
        store_data_size_buffer <= _T_7 @[Store_Unit.scala 41:48]
        skip @[Store_Unit.scala 40:18]
      skip @[Store_Unit.scala 31:34]
    else : @[Store_Unit.scala 44:10]
      io.mem_write_data <= UInt<1>("h00") @[Store_Unit.scala 45:35]
      io.mem_write_address <= UInt<1>("h00") @[Store_Unit.scala 46:38]
      io.mem_write <= UInt<1>("h00") @[Store_Unit.scala 47:30]
      skip @[Store_Unit.scala 44:10]
    node _T_8 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_8 : @[Conditional.scala 40:58]
      node _T_9 = eq(io.DATA_IN, UInt<1>("h01")) @[Store_Unit.scala 52:41]
      when _T_9 : @[Store_Unit.scala 52:49]
        stateReg <= UInt<1>("h01") @[Store_Unit.scala 53:42]
        store_data_buffer <= io.store_data @[Store_Unit.scala 54:51]
        store_data_size_buffer <= io.STORE_SIZE @[Store_Unit.scala 55:56]
        io.STORE_READY <= UInt<1>("h01") @[Store_Unit.scala 56:48]
        skip @[Store_Unit.scala 52:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_10 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_10 : @[Conditional.scala 39:67]
        node _T_11 = eq(io.ADDRESS_IN, UInt<1>("h01")) @[Store_Unit.scala 60:44]
        node _T_12 = eq(storing, UInt<1>("h01")) @[Store_Unit.scala 60:63]
        node _T_13 = and(_T_11, _T_12) @[Store_Unit.scala 60:52]
        when _T_13 : @[Store_Unit.scala 60:74]
          store_data_buffer_address <= io.store_address @[Store_Unit.scala 61:59]
          storing <= UInt<1>("h00") @[Store_Unit.scala 62:41]
          skip @[Store_Unit.scala 60:74]
        io.STORE_READY <= UInt<1>("h00") @[Store_Unit.scala 64:40]
        skip @[Conditional.scala 39:67]
    
