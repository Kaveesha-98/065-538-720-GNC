$version Generated by VerilatedVcd $end
$date Wed Nov 17 00:59:26 2021
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 Q+ clock $end
  $var wire  1 3, io_START_PROGRAM $end
  $var wire 32 q+ io_mem_write_address_data [31:0] $end
  $var wire 32 +, io_mem_write_address_instruction [31:0] $end
  $var wire  8 i+ io_mem_write_data [7:0] $end
  $var wire 32 #, io_mem_write_instruction [31:0] $end
  $var wire  1 C, io_out_mem_write $end
  $var wire 32 S, io_out_mem_write_address [31:0] $end
  $var wire  8 K, io_out_mem_write_data [7:0] $end
  $var wire  1 ;, io_outputSake $end
  $var wire  1 a+ io_signal_mem_write_data $end
  $var wire  1 y+ io_signal_mem_write_instruction $end
  $var wire  1 Y+ reset $end
  $scope module test_bench_robin_core_v2 $end
   $var wire  1 Q# PROGRAM_LOADED $end
   $var wire  1 Q+ clock $end
   $var wire  1 3, io_START_PROGRAM $end
   $var wire 32 q+ io_mem_write_address_data [31:0] $end
   $var wire 32 +, io_mem_write_address_instruction [31:0] $end
   $var wire  8 i+ io_mem_write_data [7:0] $end
   $var wire 32 #, io_mem_write_instruction [31:0] $end
   $var wire  1 C, io_out_mem_write $end
   $var wire 32 S, io_out_mem_write_address [31:0] $end
   $var wire  8 K, io_out_mem_write_data [7:0] $end
   $var wire  1 ;, io_outputSake $end
   $var wire  1 a+ io_signal_mem_write_data $end
   $var wire  1 y+ io_signal_mem_write_instruction $end
   $var wire 30 K lo [29:0] $end
   $var wire  1 Q+ memoryData_clock $end
   $var wire  1 !# memoryData_io_mem_write $end
   $var wire 32 1# memoryData_io_mem_write_address [31:0] $end
   $var wire  8 )# memoryData_io_mem_write_data [7:0] $end
   $var wire 32 # memoryData_io_rdAddr [31:0] $end
   $var wire  8 A# memoryData_io_rdData [7:0] $end
   $var wire  1 Q+ memoryInstruction_clock $end
   $var wire  1 y+ memoryInstruction_io_mem_write $end
   $var wire 32 +, memoryInstruction_io_mem_write_address [31:0] $end
   $var wire 32 #, memoryInstruction_io_mem_write_data [31:0] $end
   $var wire 32 I# memoryInstruction_io_rdAddr [31:0] $end
   $var wire 32 + memoryInstruction_io_rdData [31:0] $end
   $var wire  1 Y+ reset $end
   $var wire  1 Q+ robinCore_clock $end
   $var wire 32 + robinCore_io_INSTRUCTION [31:0] $end
   $var wire 32 I# robinCore_io_PC [31:0] $end
   $var wire  1 Q# robinCore_io_START_PROGRAM $end
   $var wire  1 Y# robinCore_io_mem_write $end
   $var wire 32 C robinCore_io_mem_write_address [31:0] $end
   $var wire  8 ; robinCore_io_mem_write_data [7:0] $end
   $var wire 32 3 robinCore_io_rdAddr [31:0] $end
   $var wire  8 A# robinCore_io_rdData [7:0] $end
   $var wire  1 Y+ robinCore_reset $end
   $scope module memoryData $end
    $var wire  1 Q+ clock $end
    $var wire  1 y# doForwardReg $end
    $var wire  1 !# io_mem_write $end
    $var wire 32 1# io_mem_write_address [31:0] $end
    $var wire  8 )# io_mem_write_data [7:0] $end
    $var wire 32 # io_rdAddr [31:0] $end
    $var wire  8 A# io_rdData [7:0] $end
    $var wire 10 9# mem_MPORT_addr [9:0] $end
    $var wire  8 )# mem_MPORT_data [7:0] $end
    $var wire  1 !# mem_MPORT_en $end
    $var wire  1 c, mem_MPORT_mask $end
    $var wire 10 i# mem_memData_addr [9:0] $end
    $var wire 10 i# mem_memData_addr_pipe_0 [9:0] $end
    $var wire  8 a# mem_memData_data [7:0] $end
    $var wire  8 q# wrDataReg [7:0] $end
   $upscope $end
   $scope module memoryInstruction $end
    $var wire  1 Q+ clock $end
    $var wire  1 ;$ doForwardReg $end
    $var wire  1 y+ io_mem_write $end
    $var wire 32 +, io_mem_write_address [31:0] $end
    $var wire 32 #, io_mem_write_data [31:0] $end
    $var wire 32 I# io_rdAddr [31:0] $end
    $var wire 32 + io_rdData [31:0] $end
    $var wire 10 [, mem_MPORT_addr [9:0] $end
    $var wire 32 #, mem_MPORT_data [31:0] $end
    $var wire  1 y+ mem_MPORT_en $end
    $var wire  1 c, mem_MPORT_mask $end
    $var wire 10 +$ mem_memData_addr [9:0] $end
    $var wire 10 +$ mem_memData_addr_pipe_0 [9:0] $end
    $var wire 32 #$ mem_memData_data [31:0] $end
    $var wire 32 3$ wrDataReg [31:0] $end
   $upscope $end
   $scope module robinCore $end
    $var wire  1 C$ INSTRUCTION_LOADED $end
    $var wire 32 I# PC [31:0] $end
    $var wire  1 M% PROGRAM_LOADED $end
    $var wire  1 7" branchCheck $end
    $var wire 32 '" branchImmBranchAddr [31:0] $end
    $var wire  1 Q+ clock $end
    $var wire  1 ?" conditionalBranching $end
    $var wire  1 Q+ controlStore_clock $end
    $var wire  4 s controlStore_io_ALU_OP [3:0] $end
    $var wire  1 m! controlStore_io_BRANCH_ADDRESS_SOURCE_ALU $end
    $var wire  1 k$ controlStore_io_BRANCH_CONDITION $end
    $var wire 32 5! controlStore_io_BRANCH_IMMEDIATE [31:0] $end
    $var wire  2 e! controlStore_io_BRANCH_SELECT [1:0] $end
    $var wire  1 K$ controlStore_io_CHOOSE_IMMEDIATE $end
    $var wire  1 %! controlStore_io_CHOOSE_MEMORY_LOAD $end
    $var wire  1 s$ controlStore_io_CHOOSE_PC $end
    $var wire  1 =! controlStore_io_DATA_IN $end
    $var wire  1 c$ controlStore_io_EXTENSION $end
    $var wire 32 -! controlStore_io_IMMEDIATE [31:0] $end
    $var wire 32 + controlStore_io_INSTRUCTION [31:0] $end
    $var wire  1 C$ controlStore_io_INSTRUCTION_LOADED $end
    $var wire  1 ]! controlStore_io_LOAD_ADDRESS_IN $end
    $var wire  1 M! controlStore_io_LOAD_READY $end
    $var wire  2 U! controlStore_io_LOAD_SIZE [1:0] $end
    $var wire  1 { controlStore_io_PROCEDURE_BRANCHING $end
    $var wire  5 c controlStore_io_RD [4:0] $end
    $var wire  5 S controlStore_io_RS1 [4:0] $end
    $var wire  5 [ controlStore_io_RS2 [4:0] $end
    $var wire  1 E! controlStore_io_STORE_ADDRESS_IN $end
    $var wire  1 S$ controlStore_io_STORE_READY $end
    $var wire  2 [$ controlStore_io_STORE_SIZE [1:0] $end
    $var wire  1 u! controlStore_io_UPDATE_PC $end
    $var wire  1 k controlStore_io_WRITE_EN $end
    $var wire  1 Y+ controlStore_reset $end
    $var wire  1 Q+ dataPath_clock $end
    $var wire  4 s dataPath_io_ALU_OP [3:0] $end
    $var wire  1 K$ dataPath_io_CHOOSE_IMMEDIATE $end
    $var wire  1 %! dataPath_io_CHOOSE_MEMORY_LOAD $end
    $var wire  1 s$ dataPath_io_CHOOSE_PC $end
    $var wire  1 {$ dataPath_io_EQUAL $end
    $var wire 32 -! dataPath_io_IMMEDIATE [31:0] $end
    $var wire  1 %% dataPath_io_LESS_THAN $end
    $var wire 32 I# dataPath_io_PC [31:0] $end
    $var wire  1 { dataPath_io_PROCEDURE_BRANCHING $end
    $var wire  5 c dataPath_io_RD [4:0] $end
    $var wire  5 S dataPath_io_RS1 [4:0] $end
    $var wire  5 [ dataPath_io_RS2 [4:0] $end
    $var wire  1 -% dataPath_io_SIGNED_LESS_THAN $end
    $var wire  1 k dataPath_io_WRITE_EN $end
    $var wire 32 5% dataPath_io_instruction_next_address [31:0] $end
    $var wire 32 E% dataPath_io_instruction_return_address [31:0] $end
    $var wire 32 5% dataPath_io_load_address [31:0] $end
    $var wire 32 =% dataPath_io_load_data [31:0] $end
    $var wire 32 5% dataPath_io_store_address [31:0] $end
    $var wire 32 }! dataPath_io_store_data [31:0] $end
    $var wire  1 Y+ dataPath_reset $end
    $var wire 32 + io_INSTRUCTION [31:0] $end
    $var wire 32 I# io_PC [31:0] $end
    $var wire  1 Q# io_START_PROGRAM $end
    $var wire  1 Y# io_mem_write $end
    $var wire 32 C io_mem_write_address [31:0] $end
    $var wire  8 ; io_mem_write_data [7:0] $end
    $var wire 32 3 io_rdAddr [31:0] $end
    $var wire  8 A# io_rdData [7:0] $end
    $var wire  1 /" lessThanGreaterThanALUResult $end
    $var wire  1 Q+ loadUnit_clock $end
    $var wire  1 c$ loadUnit_io_EXTENSION $end
    $var wire  1 ]! loadUnit_io_LOAD_ADDRESS_IN $end
    $var wire  1 M! loadUnit_io_LOAD_READY $end
    $var wire  2 U! loadUnit_io_LOAD_SIZE [1:0] $end
    $var wire  8 A# loadUnit_io_load_data [7:0] $end
    $var wire 32 =% loadUnit_io_load_data_out [31:0] $end
    $var wire 32 5% loadUnit_io_load_mem_address_in [31:0] $end
    $var wire 32 3 loadUnit_io_load_mem_address_out [31:0] $end
    $var wire  1 Y+ loadUnit_reset $end
    $var wire 32 E% noBranchNextAddr [31:0] $end
    $var wire  1 Y+ reset $end
    $var wire  1 Q+ storeUnit_clock $end
    $var wire  1 E! storeUnit_io_ADDRESS_IN $end
    $var wire  1 =! storeUnit_io_DATA_IN $end
    $var wire  1 S$ storeUnit_io_STORE_READY $end
    $var wire  2 [$ storeUnit_io_STORE_SIZE [1:0] $end
    $var wire  1 Y# storeUnit_io_mem_write $end
    $var wire 32 C storeUnit_io_mem_write_address [31:0] $end
    $var wire  8 ; storeUnit_io_mem_write_data [7:0] $end
    $var wire 32 5% storeUnit_io_store_address [31:0] $end
    $var wire 32 }! storeUnit_io_store_data [31:0] $end
    $var wire  1 Y+ storeUnit_reset $end
    $scope module controlStore $end
     $var wire  1 u% LOAD_READY $end
     $var wire  1 m% STORE_READY $end
     $var wire  1 Q+ clock $end
     $var wire  7 }% hi [6:0] $end
     $var wire  1 /& hi_1 $end
     $var wire  1 ?& hi_3 $end
     $var wire  6 O& hi_5 [5:0] $end
     $var wire  1 g& hi_9 $end
     $var wire 32 e% instruction [31:0] $end
     $var wire  4 s io_ALU_OP [3:0] $end
     $var wire  1 m! io_BRANCH_ADDRESS_SOURCE_ALU $end
     $var wire  1 k$ io_BRANCH_CONDITION $end
     $var wire 32 5! io_BRANCH_IMMEDIATE [31:0] $end
     $var wire  2 e! io_BRANCH_SELECT [1:0] $end
     $var wire  1 K$ io_CHOOSE_IMMEDIATE $end
     $var wire  1 %! io_CHOOSE_MEMORY_LOAD $end
     $var wire  1 s$ io_CHOOSE_PC $end
     $var wire  1 =! io_DATA_IN $end
     $var wire  1 c$ io_EXTENSION $end
     $var wire 32 -! io_IMMEDIATE [31:0] $end
     $var wire 32 + io_INSTRUCTION [31:0] $end
     $var wire  1 C$ io_INSTRUCTION_LOADED $end
     $var wire  1 ]! io_LOAD_ADDRESS_IN $end
     $var wire  1 M! io_LOAD_READY $end
     $var wire  2 U! io_LOAD_SIZE [1:0] $end
     $var wire  1 { io_PROCEDURE_BRANCHING $end
     $var wire  5 c io_RD [4:0] $end
     $var wire  5 S io_RS1 [4:0] $end
     $var wire  5 [ io_RS2 [4:0] $end
     $var wire  1 E! io_STORE_ADDRESS_IN $end
     $var wire  1 S$ io_STORE_READY $end
     $var wire  2 [$ io_STORE_SIZE [1:0] $end
     $var wire  1 u! io_UPDATE_PC $end
     $var wire  1 k io_WRITE_EN $end
     $var wire  5 '& lo [4:0] $end
     $var wire  3 7& lo_1 [2:0] $end
     $var wire  1 G& lo_3 $end
     $var wire  4 W& lo_4 [3:0] $end
     $var wire  8 _& lo_6 [7:0] $end
     $var wire 10 o& lo_7 [9:0] $end
     $var wire  1 Y+ reset $end
     $var wire  3 ]% stallState [2:0] $end
     $var wire  3 U% stateReg [2:0] $end
    $upscope $end
    $scope module dataPath $end
     $var wire 32 w& ALU_in1 [31:0] $end
     $var wire 32 !' ALU_in2 [31:0] $end
     $var wire  1 Q+ clock $end
     $var wire  1 Q+ cpuALU_clock $end
     $var wire  4 s cpuALU_io_ALU_OP [3:0] $end
     $var wire 32 w& cpuALU_io_ALUinput1 [31:0] $end
     $var wire 32 !' cpuALU_io_ALUinput2 [31:0] $end
     $var wire 32 5% cpuALU_io_ALUoutput [31:0] $end
     $var wire  1 {$ cpuALU_io_EQUAL $end
     $var wire  1 %% cpuALU_io_LESS_THAN $end
     $var wire  1 -% cpuALU_io_SIGNED_LESS_THAN $end
     $var wire  1 Y+ cpuALU_reset $end
     $var wire  4 s io_ALU_OP [3:0] $end
     $var wire  1 K$ io_CHOOSE_IMMEDIATE $end
     $var wire  1 %! io_CHOOSE_MEMORY_LOAD $end
     $var wire  1 s$ io_CHOOSE_PC $end
     $var wire  1 {$ io_EQUAL $end
     $var wire 32 -! io_IMMEDIATE [31:0] $end
     $var wire  1 %% io_LESS_THAN $end
     $var wire 32 I# io_PC [31:0] $end
     $var wire  1 { io_PROCEDURE_BRANCHING $end
     $var wire  5 c io_RD [4:0] $end
     $var wire  5 S io_RS1 [4:0] $end
     $var wire  5 [ io_RS2 [4:0] $end
     $var wire  1 -% io_SIGNED_LESS_THAN $end
     $var wire  1 k io_WRITE_EN $end
     $var wire 32 5% io_instruction_next_address [31:0] $end
     $var wire 32 E% io_instruction_return_address [31:0] $end
     $var wire 32 5% io_load_address [31:0] $end
     $var wire 32 =% io_load_data [31:0] $end
     $var wire 32 5% io_store_address [31:0] $end
     $var wire 32 }! io_store_data [31:0] $end
     $var wire 32 _" rdData [31:0] $end
     $var wire  1 Q+ registerFile_clock $end
     $var wire  5 c registerFile_io_RD [4:0] $end
     $var wire  5 S registerFile_io_RS1 [4:0] $end
     $var wire  5 [ registerFile_io_RS2 [4:0] $end
     $var wire  1 k registerFile_io_WRITE_EN $end
     $var wire 32 W" registerFile_io_rdData [31:0] $end
     $var wire 32 G" registerFile_io_rs1Data [31:0] $end
     $var wire 32 O" registerFile_io_rs2Data [31:0] $end
     $var wire  1 Y+ reset $end
     $var wire 32 g" rs1_ALU [31:0] $end
     $var wire 32 o" rs2_ALU [31:0] $end
     $var wire 32 w" rs2_ALU_rd [31:0] $end
     $scope module cpuALU $end
      $var wire 32 5% ALUoutput [31:0] $end
      $var wire  1 {$ EQUAL $end
      $var wire  1 %% LESS_THAN $end
      $var wire  1 -% SIGNED_LESS_THAN $end
      $var wire  1 Q+ clock $end
      $var wire  4 s io_ALU_OP [3:0] $end
      $var wire 32 w& io_ALUinput1 [31:0] $end
      $var wire 32 !' io_ALUinput2 [31:0] $end
      $var wire 32 5% io_ALUoutput [31:0] $end
      $var wire  1 {$ io_EQUAL $end
      $var wire  1 %% io_LESS_THAN $end
      $var wire  1 -% io_SIGNED_LESS_THAN $end
      $var wire  1 Y+ reset $end
     $upscope $end
     $scope module registerFile $end
      $var wire  1 Q+ clock $end
      $var wire  5 c io_RD [4:0] $end
      $var wire  5 S io_RS1 [4:0] $end
      $var wire  5 [ io_RS2 [4:0] $end
      $var wire  1 k io_WRITE_EN $end
      $var wire 32 W" io_rdData [31:0] $end
      $var wire 32 G" io_rs1Data [31:0] $end
      $var wire 32 O" io_rs2Data [31:0] $end
      $var wire 32 )' registerFile_0 [31:0] $end
      $var wire 32 1' registerFile_1 [31:0] $end
      $var wire 32 y' registerFile_10 [31:0] $end
      $var wire 32 #( registerFile_11 [31:0] $end
      $var wire 32 +( registerFile_12 [31:0] $end
      $var wire 32 3( registerFile_13 [31:0] $end
      $var wire 32 ;( registerFile_14 [31:0] $end
      $var wire 32 C( registerFile_15 [31:0] $end
      $var wire 32 K( registerFile_16 [31:0] $end
      $var wire 32 S( registerFile_17 [31:0] $end
      $var wire 32 [( registerFile_18 [31:0] $end
      $var wire 32 c( registerFile_19 [31:0] $end
      $var wire 32 9' registerFile_2 [31:0] $end
      $var wire 32 k( registerFile_20 [31:0] $end
      $var wire 32 s( registerFile_21 [31:0] $end
      $var wire 32 {( registerFile_22 [31:0] $end
      $var wire 32 %) registerFile_23 [31:0] $end
      $var wire 32 -) registerFile_24 [31:0] $end
      $var wire 32 5) registerFile_25 [31:0] $end
      $var wire 32 =) registerFile_26 [31:0] $end
      $var wire 32 E) registerFile_27 [31:0] $end
      $var wire 32 M) registerFile_28 [31:0] $end
      $var wire 32 U) registerFile_29 [31:0] $end
      $var wire 32 A' registerFile_3 [31:0] $end
      $var wire 32 ]) registerFile_30 [31:0] $end
      $var wire 32 e) registerFile_31 [31:0] $end
      $var wire 32 I' registerFile_4 [31:0] $end
      $var wire 32 Q' registerFile_5 [31:0] $end
      $var wire 32 Y' registerFile_6 [31:0] $end
      $var wire 32 a' registerFile_7 [31:0] $end
      $var wire 32 i' registerFile_8 [31:0] $end
      $var wire 32 q' registerFile_9 [31:0] $end
     $upscope $end
    $upscope $end
    $scope module loadUnit $end
     $var wire  1 W* EXTENSION $end
     $var wire  2 O* LOAD_SIZE [1:0] $end
     $var wire  1 g* MSB $end
     $var wire  1 Q+ clock $end
     $var wire 24 1+ extending_mask [23:0] $end
     $var wire 16 w* hi [15:0] $end
     $var wire 24 9+ hi_1 [23:0] $end
     $var wire 24 I+ hi_2 [23:0] $end
     $var wire  1 c$ io_EXTENSION $end
     $var wire  1 ]! io_LOAD_ADDRESS_IN $end
     $var wire  1 M! io_LOAD_READY $end
     $var wire  2 U! io_LOAD_SIZE [1:0] $end
     $var wire  8 A# io_load_data [7:0] $end
     $var wire 32 =% io_load_data_out [31:0] $end
     $var wire 32 5% io_load_mem_address_in [31:0] $end
     $var wire 32 3 io_load_mem_address_out [31:0] $end
     $var wire  8 !+ lo [7:0] $end
     $var wire  8 A+ lo_1 [7:0] $end
     $var wire 32 G* load_data_address_buffer [31:0] $end
     $var wire 32 7* load_data_buffer [31:0] $end
     $var wire  2 ?* load_data_size_buffer [1:0] $end
     $var wire 24 )+ mask [23:0] $end
     $var wire  1 o* needMask $end
     $var wire  1 Y+ reset $end
     $var wire  1 _* stateReg $end
    $upscope $end
    $scope module storeUnit $end
     $var wire  1 Q+ clock $end
     $var wire  1 E! io_ADDRESS_IN $end
     $var wire  1 =! io_DATA_IN $end
     $var wire  1 S$ io_STORE_READY $end
     $var wire  2 [$ io_STORE_SIZE [1:0] $end
     $var wire  1 Y# io_mem_write $end
     $var wire 32 C io_mem_write_address [31:0] $end
     $var wire  8 ; io_mem_write_data [7:0] $end
     $var wire 32 5% io_store_address [31:0] $end
     $var wire 32 }! io_store_data [31:0] $end
     $var wire 24 /* lo [23:0] $end
     $var wire  1 Y+ reset $end
     $var wire  1 '* stateReg $end
     $var wire 32 m) store_data_buffer [31:0] $end
     $var wire 32 }) store_data_buffer_address [31:0] $end
     $var wire  2 u) store_data_size_buffer [1:0] $end
     $var wire  1 Y# storing $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#8
b00000000000000000000000000000000 #
b00000000000000000000000000000000 +
b00000000000000000000000000000000 3
b00000000 ;
b00000000000000000000000000000000 C
b000000000000000000000000000000 K
b00000 S
b00000 [
b00000 c
0k
b0000 s
0{
0%!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 5!
0=!
0E!
1M!
b00 U!
0]!
b01 e!
0m!
0u!
b00000000000000000000000000000000 }!
b00000000000000000000000000000000 '"
0/"
07"
0?"
b00000000000000000000000000000000 G"
b00000000000000000000000000000000 O"
b00000000000000000000000000000000 W"
b00000000000000000000000000000000 _"
b00000000000000000000000000000000 g"
b00000000000000000000000000000000 o"
b00000000000000000000000000000000 w"
0!#
b00000000 )#
b00000000000000000000000000000000 1#
b0000000000 9#
b00000000 A#
b00000000000000000000000000000000 I#
0Q#
0Y#
b00000000 a#
b0000000000 i#
b00000000 q#
0y#
b00000000000000000000000000000000 #$
b0000000000 +$
b00000000000000000000000000000000 3$
0;$
0C$
0K$
1S$
b01 [$
0c$
0k$
0s$
0{$
0%%
0-%
b00000000000000000000000000000000 5%
b00000000000000000000000000000000 =%
b00000000000000000000000000000100 E%
0M%
b000 U%
b000 ]%
b00000000000000000000000000000000 e%
0m%
0u%
b0000000 }%
b00000 '&
0/&
b000 7&
0?&
0G&
b000000 O&
b0000 W&
b00000000 _&
0g&
b0000000000 o&
b00000000000000000000000000000000 w&
b00000000000000000000000000000000 !'
b00000000000000000000000000000000 )'
b00000000000000000000000000000000 1'
b00000000000000000000000000000000 9'
b00000000000000000000000000000000 A'
b00000000000000000000000000000000 I'
b00000000000000000000000000000000 Q'
b00000000000000000000000000000000 Y'
b00000000000000000000000000000000 a'
b00000000000000000000000000000000 i'
b00000000000000000000000000000000 q'
b00000000000000000000000000000000 y'
b00000000000000000000000000000000 #(
b00000000000000000000000000000000 +(
b00000000000000000000000000000000 3(
b00000000000000000000000000000000 ;(
b00000000000000000000000000000000 C(
b00000000000000000000000000000000 K(
b00000000000000000000000000000000 S(
b00000000000000000000000000000000 [(
b00000000000000000000000000000000 c(
b00000000000000000000000000000000 k(
b00000000000000000000000000000000 s(
b00000000000000000000000000000000 {(
b00000000000000000000000000000000 %)
b00000000000000000000000000000000 -)
b00000000000000000000000000000000 5)
b00000000000000000000000000000000 =)
b00000000000000000000000000000000 E)
b00000000000000000000000000000000 M)
b00000000000000000000000000000000 U)
b00000000000000000000000000000000 ])
b00000000000000000000000000000000 e)
b00000000000000000000000000000000 m)
b00 u)
b00000000000000000000000000000000 })
0'*
b000000000000000000000000 /*
b00000000000000000000000000000000 7*
b00 ?*
b00000000000000000000000000000000 G*
b00 O*
0W*
0_*
0g*
0o*
b0000000000000000 w*
b00000000 !+
b000000000000000000000000 )+
b000000000000000000000000 1+
b000000000000000000000000 9+
b00000000 A+
b000000000000000000000000 I+
0Q+
0Y+
0a+
b00000000 i+
b00000000000000000000000000000000 q+
1y+
b00000100000000000000000001101111 #,
b00000000000000000000000000000000 +,
03,
1;,
0C,
b00000000 K,
b00000000000000000000000000000000 S,
b0000000000 [,
1c,
#10
b00000100000000000000000001101111 +
b00000100000000000000000001101111 #$
b00000100000000000000000001101111 3$
1;$
1{$
1m%
1u%
1Q+
#15
0Q+
#18
b00000000000100000000010110010011 #,
b00000000000000000000000000000001 +,
b0000000001 [,
#20
b00000000000100000000010110010011 3$
0;$
1Q+
#25
0Q+
#28
b00000000000001010001010001100011 #,
b00000000000000000000000000000010 +,
b0000000010 [,
#30
b00000000000001010001010001100011 3$
1Q+
#35
0Q+
#38
b00000000000000001000000001100111 #,
b00000000000000000000000000000011 +,
b0000000011 [,
#40
b00000000000000001000000001100111 3$
1Q+
#45
0Q+
#48
b00000000000001010000001010010011 #,
b00000000000000000000000000000100 +,
b0000000100 [,
#50
b00000000000001010000001010010011 3$
1Q+
#55
0Q+
#58
b00000000000001011000001100010011 #,
b00000000000000000000000000000101 +,
b0000000101 [,
#60
b00000000000001011000001100010011 3$
1Q+
#65
0Q+
#68
b00000000000100101111001110010011 #,
b00000000000000000000000000000110 +,
b0000000110 [,
#70
b00000000000100101111001110010011 3$
1Q+
#75
0Q+
#78
b00000000000000111001010001100011 #,
b00000000000000000000000000000111 +,
b0000000111 [,
#80
b00000000000000111001010001100011 3$
1Q+
#85
0Q+
#88
b00000000011001011000010110110011 #,
b00000000000000000000000000001000 +,
b0000001000 [,
#90
b00000000011001011000010110110011 3$
1Q+
#95
0Q+
#98
b00000000000101011001010110010011 #,
b00000000000000000000000000001001 +,
b0000001001 [,
#100
b00000000000101011001010110010011 3$
1Q+
#105
0Q+
#108
b00000000000100101101001010010011 #,
b00000000000000000000000000001010 +,
b0000001010 [,
#110
b00000000000100101101001010010011 3$
1Q+
#115
0Q+
#118
b11111100000000101000101011100011 #,
b00000000000000000000000000001011 +,
b0000001011 [,
#120
b11111100000000101000101011100011 3$
1Q+
#125
0Q+
#128
b00000000000100110101001100010011 #,
b00000000000000000000000000001100 +,
b0000001100 [,
#130
b00000000000100110101001100010011 3$
1Q+
#135
0Q+
#138
b01111110010100000001000001101111 #,
b00000000000000000000000000001101 +,
b0000001101 [,
#140
b01111110010100000001000001101111 3$
1Q+
#145
0Q+
#148
b11111111111101010000010100010011 #,
b00000000000000000000000000001110 +,
b0000001110 [,
#150
b11111111111101010000010100010011 3$
1Q+
#155
0Q+
#158
b01111100110100000001000001101111 #,
b00000000000000000000000000001111 +,
b0000001111 [,
#160
b01111100110100000001000001101111 3$
1Q+
#165
0Q+
#168
b10101010101010101011000010110111 #,
b00000000000000000000000000010000 +,
b0000010000 [,
#170
b10101010101010101011000010110111 3$
1Q+
#175
0Q+
#178
b10101010101000001000000010010011 #,
b00000000000000000000000000010001 +,
b0000010001 [,
#180
b10101010101000001000000010010011 3$
1Q+
#185
0Q+
#188
b01010101010101010101000100110111 #,
b00000000000000000000000000010010 +,
b0000010010 [,
#190
b01010101010101010101000100110111 3$
1Q+
#195
0Q+
#198
b01010101010100010000000100010011 #,
b00000000000000000000000000010011 +,
b0000010011 [,
#200
b01010101010100010000000100010011 3$
1Q+
#205
0Q+
#208
b00000000001000001111000110110011 #,
b00000000000000000000000000010100 +,
b0000010100 [,
#210
b00000000001000001111000110110011 3$
1Q+
#215
0Q+
#218
b00000000001000001111000000110011 #,
b00000000000000000000000000010101 +,
b0000010101 [,
#220
b00000000001000001111000000110011 3$
1Q+
#225
0Q+
#228
b00000000001000001110001000110011 #,
b00000000000000000000000000010110 +,
b0000010110 [,
#230
b00000000001000001110001000110011 3$
1Q+
#235
0Q+
#238
b00000000001000001110000000110011 #,
b00000000000000000000000000010111 +,
b0000010111 [,
#240
b00000000001000001110000000110011 3$
1Q+
#245
0Q+
#248
b00000000000100000000001010010011 #,
b00000000000000000000000000011000 +,
b0000011000 [,
#250
b00000000000100000000001010010011 3$
1Q+
#255
0Q+
#258
b01000000010100001101001100110011 #,
b00000000000000000000000000011001 +,
b0000011001 [,
#260
b01000000010100001101001100110011 3$
1Q+
#265
0Q+
#268
b00000000000100101001001010010011 #,
b00000000000000000000000000011010 +,
b0000011010 [,
#270
b00000000000100101001001010010011 3$
1Q+
#275
0Q+
#278
b01000000010100001101001100110011 #,
b00000000000000000000000000011011 +,
b0000011011 [,
#280
b01000000010100001101001100110011 3$
1Q+
#285
0Q+
#288
b11111110010100000001110011100011 #,
b00000000000000000000000000011100 +,
b0000011100 [,
#290
b11111110010100000001110011100011 3$
1Q+
#295
0Q+
#298
b00000000000100000000001010010011 #,
b00000000000000000000000000011101 +,
b0000011101 [,
#300
b00000000000100000000001010010011 3$
1Q+
#305
0Q+
#308
b00000000010100001101001100110011 #,
b00000000000000000000000000011110 +,
b0000011110 [,
#310
b00000000010100001101001100110011 3$
1Q+
#315
0Q+
#318
b00000000000100101001001010010011 #,
b00000000000000000000000000011111 +,
b0000011111 [,
#320
b00000000000100101001001010010011 3$
1Q+
#325
0Q+
#328
b00000000010100001101001100110011 #,
b00000000000000000000000000100000 +,
b0000100000 [,
#330
b00000000010100001101001100110011 3$
1Q+
#335
0Q+
#338
b11111110000000101001110011100011 #,
b00000000000000000000000000100001 +,
b0000100001 [,
#340
b11111110000000101001110011100011 3$
1Q+
#345
0Q+
#348
b00000000001000001100001110110011 #,
b00000000000000000000000000100010 +,
b0000100010 [,
#350
b00000000001000001100001110110011 3$
1Q+
#355
0Q+
#358
b00000000001000001100000000110011 #,
b00000000000000000000000000100011 +,
b0000100011 [,
#360
b00000000001000001100000000110011 3$
1Q+
#365
0Q+
#368
b00000000000100100101010000010011 #,
b00000000000000000000000000100100 +,
b0000100100 [,
#370
b00000000000100100101010000010011 3$
1Q+
#375
0Q+
#378
b00000000000100000000010010010011 #,
b00000000000000000000000000100101 +,
b0000100101 [,
#380
b00000000000100000000010010010011 3$
1Q+
#385
0Q+
#388
b00000001111001001001010010010011 #,
b00000000000000000000000000100110 +,
b0000100110 [,
#390
b00000001111001001001010010010011 3$
1Q+
#395
0Q+
#398
b11111111111101001100010100010011 #,
b00000000000000000000000000100111 +,
b0000100111 [,
#400
b11111111111101001100010100010011 3$
1Q+
#405
0Q+
#408
b00000000101001001011010110110011 #,
b00000000000000000000000000101000 +,
b0000101000 [,
#410
b00000000101001001011010110110011 3$
1Q+
#415
0Q+
#418
b00000000101001001010011000110011 #,
b00000000000000000000000000101001 +,
b0000101001 [,
#420
b00000000101001001010011000110011 3$
1Q+
#425
0Q+
#428
b00000000000101010000010100010011 #,
b00000000000000000000000000101010 +,
b0000101010 [,
#430
b00000000000101010000010100010011 3$
1Q+
#435
0Q+
#438
b00000000101001001011010110110011 #,
b00000000000000000000000000101011 +,
b0000101011 [,
#440
b00000000101001001011010110110011 3$
1Q+
#445
0Q+
#448
b00000000101001001010011000110011 #,
b00000000000000000000000000101100 +,
b0000101100 [,
#450
b00000000101001001010011000110011 3$
1Q+
#455
0Q+
#458
b00000000000101010000010100010011 #,
b00000000000000000000000000101101 +,
b0000101101 [,
#460
b00000000000101010000010100010011 3$
1Q+
#465
0Q+
#468
b00000000101001001011010110110011 #,
b00000000000000000000000000101110 +,
b0000101110 [,
#470
b00000000101001001011010110110011 3$
1Q+
#475
0Q+
#478
b00000000101001001010011000110011 #,
b00000000000000000000000000101111 +,
b0000101111 [,
#480
b00000000101001001010011000110011 3$
1Q+
#485
0Q+
#488
b00000000000100000000001010010011 #,
b00000000000000000000000000110000 +,
b0000110000 [,
#490
b00000000000100000000001010010011 3$
1Q+
#495
0Q+
#498
b00000000010100001001011010110011 #,
b00000000000000000000000000110001 +,
b0000110001 [,
#500
b00000000010100001001011010110011 3$
1Q+
#505
0Q+
#508
b00000000000100101001001010010011 #,
b00000000000000000000000000110010 +,
b0000110010 [,
#510
b00000000000100101001001010010011 3$
1Q+
#515
0Q+
#518
b00000000010100001001011010110011 #,
b00000000000000000000000000110011 +,
b0000110011 [,
#520
b00000000010100001001011010110011 3$
1Q+
#525
0Q+
#528
b11111110000000101001110011100011 #,
b00000000000000000000000000110100 +,
b0000110100 [,
#530
b11111110000000101001110011100011 3$
1Q+
#535
0Q+
#538
b00000000001000001000011100110011 #,
b00000000000000000000000000110101 +,
b0000110101 [,
#540
b00000000001000001000011100110011 3$
1Q+
#545
0Q+
#548
b01000000001000001000011110110011 #,
b00000000000000000000000000110110 +,
b0000110110 [,
#550
b01000000001000001000011110110011 3$
1Q+
#555
0Q+
#558
b00000000000100010000011100110011 #,
b00000000000000000000000000110111 +,
b0000110111 [,
#560
b00000000000100010000011100110011 3$
1Q+
#565
0Q+
#568
b01000000000100010000011110110011 #,
b00000000000000000000000000111000 +,
b0000111000 [,
#570
b01000000000100010000011110110011 3$
1Q+
#575
0Q+
#578
b01000000100000001101100000010011 #,
b00000000000000000000000000111001 +,
b0000111001 [,
#580
b01000000100000001101100000010011 3$
1Q+
#585
0Q+
#588
b00000000100000001101100010010011 #,
b00000000000000000000000000111010 +,
b0000111010 [,
#590
b00000000100000001101100010010011 3$
1Q+
#595
0Q+
#598
b00000000100000001001100100010011 #,
b00000000000000000000000000111011 +,
b0000111011 [,
#600
b00000000100000001001100100010011 3$
1Q+
#605
0Q+
#608
b01000001000000001101100000010011 #,
b00000000000000000000000000111100 +,
b0000111100 [,
#610
b01000001000000001101100000010011 3$
1Q+
#615
0Q+
#618
b00000001000000001101100010010011 #,
b00000000000000000000000000111101 +,
b0000111101 [,
#620
b00000001000000001101100010010011 3$
1Q+
#625
0Q+
#628
b00000001000000001001100100010011 #,
b00000000000000000000000000111110 +,
b0000111110 [,
#630
b00000001000000001001100100010011 3$
1Q+
#635
0Q+
#638
b01000001100000001101100000010011 #,
b00000000000000000000000000111111 +,
b0000111111 [,
#640
b01000001100000001101100000010011 3$
1Q+
#645
0Q+
#648
b00000001100000001101100010010011 #,
b00000000000000000000000001000000 +,
b0001000000 [,
#650
b00000001100000001101100010010011 3$
1Q+
#655
0Q+
#658
b00000001100000001001100100010011 #,
b00000000000000000000000001000001 +,
b0001000001 [,
#660
b00000001100000001001100100010011 3$
1Q+
#665
0Q+
#668
b01111111111100001111100110010011 #,
b00000000000000000000000001000010 +,
b0001000010 [,
#670
b01111111111100001111100110010011 3$
1Q+
#675
0Q+
#678
b01111111111100001110101000010011 #,
b00000000000000000000000001000011 +,
b0001000011 [,
#680
b01111111111100001110101000010011 3$
1Q+
#685
0Q+
#688
b01111111111100001100101010010011 #,
b00000000000000000000000001000100 +,
b0001000100 [,
#690
b01111111111100001100101010010011 3$
1Q+
#695
0Q+
#698
b00000000011111111111101100000000 #,
b00000000000000000000000001000101 +,
b0001000101 [,
#700
b00000000011111111111101100000000 3$
1Q+
#705
0Q+
#708
b01111111111100001010101110010011 #,
b00000000000000000000000001000110 +,
b0001000110 [,
#710
b01111111111100001010101110010011 3$
1Q+
#715
0Q+
#718
b01111111111100001000110000010011 #,
b00000000000000000000000001000111 +,
b0001000111 [,
#720
b01111111111100001000110000010011 3$
1Q+
#725
0Q+
#728
b10000000000000001111100110010011 #,
b00000000000000000000000001001000 +,
b0001001000 [,
#730
b10000000000000001111100110010011 3$
1Q+
#735
0Q+
#738
b10000000000000001110101000010011 #,
b00000000000000000000000001001001 +,
b0001001001 [,
#740
b10000000000000001110101000010011 3$
1Q+
#745
0Q+
#748
b10000000000000001100101010010011 #,
b00000000000000000000000001001010 +,
b0001001010 [,
#750
b10000000000000001100101010010011 3$
1Q+
#755
0Q+
#758
b11111111100000000000101100000000 #,
b00000000000000000000000001001011 +,
b0001001011 [,
#760
b11111111100000000000101100000000 3$
1Q+
#765
0Q+
#768
b10000000000000001010101110010011 #,
b00000000000000000000000001001100 +,
b0001001100 [,
#770
b10000000000000001010101110010011 3$
1Q+
#775
0Q+
#778
b10000000000000001000110000010011 #,
b00000000000000000000000001001101 +,
b0001001101 [,
#780
b10000000000000001000110000010011 3$
1Q+
#785
0Q+
#788
b00000001001000110100110010110111 #,
b00000000000000000000000001001110 +,
b0001001110 [,
#790
b00000001001000110100110010110111 3$
1Q+
#795
0Q+
#798
b01010110011111001000110010010011 #,
b00000000000000000000000001001111 +,
b0001001111 [,
#800
b01010110011111001000110010010011 3$
1Q+
#805
0Q+
#808
b10001001101010111101110100110111 #,
b00000000000000000000000001010000 +,
b0001010000 [,
#810
b10001001101010111101110100110111 3$
1Q+
#815
0Q+
#818
b11101110111111010000110100010011 #,
b00000000000000000000000001010001 +,
b0001010001 [,
#820
b11101110111111010000110100010011 3$
1Q+
#825
0Q+
#828
b11111110110111001100110110110111 #,
b00000000000000000000000001010010 +,
b0001010010 [,
#830
b11111110110111001100110110110111 3$
1Q+
#835
0Q+
#838
b10101001100011011000110110010011 #,
b00000000000000000000000001010011 +,
b0001010011 [,
#840
b10101001100011011000110110010011 3$
1Q+
#845
0Q+
#848
b00010010101011111111111000110111 #,
b00000000000000000000000001010100 +,
b0001010100 [,
#850
b00010010101011111111111000110111 3$
1Q+
#855
0Q+
#858
b00100001000011100000111000010011 #,
b00000000000000000000000001010101 +,
b0001010101 [,
#860
b00100001000011100000111000010011 3$
1Q+
#865
0Q+
#868
b01000000000000000000111010010011 #,
b00000000000000000000000001010110 +,
b0001010110 [,
#870
b01000000000000000000111010010011 3$
1Q+
#875
0Q+
#878
b00000001100111101010000000100011 #,
b00000000000000000000000001010111 +,
b0001010111 [,
#880
b00000001100111101010000000100011 3$
1Q+
#885
0Q+
#888
b00000001101011101010001000100011 #,
b00000000000000000000000001011000 +,
b0001011000 [,
#890
b00000001101011101010001000100011 3$
1Q+
#895
0Q+
#898
b00000001101111101010010000100011 #,
b00000000000000000000000001011001 +,
b0001011001 [,
#900
b00000001101111101010010000100011 3$
1Q+
#905
0Q+
#908
b00000001110011101001001100100011 #,
b00000000000000000000000001011010 +,
b0001011010 [,
#910
b00000001110011101001001100100011 3$
1Q+
#915
0Q+
#918
b00000001101111101001001000100011 #,
b00000000000000000000000001011011 +,
b0001011011 [,
#920
b00000001101111101001001000100011 3$
1Q+
#925
0Q+
#928
b00000001101011101001000100100011 #,
b00000000000000000000000001011100 +,
b0001011100 [,
#930
b00000001101011101001000100100011 3$
1Q+
#935
0Q+
#938
b00000001100111101000000010100011 #,
b00000000000000000000000001011101 +,
b0001011101 [,
#940
b00000001100111101000000010100011 3$
1Q+
#945
0Q+
#948
b00000001101011101000000000100011 #,
b00000000000000000000000001011110 +,
b0001011110 [,
#950
b00000001101011101000000000100011 3$
1Q+
#955
0Q+
#958
b11111111101111101000111110100011 #,
b00000000000000000000000001011111 +,
b0001011111 [,
#960
b11111111101111101000111110100011 3$
1Q+
#965
0Q+
#968
b11111111100111101000111100100011 #,
b00000000000000000000000001100000 +,
b0001100000 [,
#970
b11111111100111101000111100100011 3$
1Q+
#975
0Q+
#978
b11111111101011101001111000100011 #,
b00000000000000000000000001100001 +,
b0001100001 [,
#980
b11111111101011101001111000100011 3$
1Q+
#985
0Q+
#988
b11111111101111101010110000100011 #,
b00000000000000000000000001100010 +,
b0001100010 [,
#990
b11111111101111101010110000100011 3$
1Q+
#995
0Q+
#998
b11111111100111101010111000100011 #,
b00000000000000000000000001100011 +,
b0001100011 [,
#1000
b11111111100111101010111000100011 3$
1Q+
#1005
0Q+
#1008
b11111111101011101001111100100011 #,
b00000000000000000000000001100100 +,
b0001100100 [,
#1010
b11111111101011101001111100100011 3$
1Q+
#1015
0Q+
#1018
b11111111101111101000111110100011 #,
b00000000000000000000000001100101 +,
b0001100101 [,
#1020
b11111111101111101000111110100011 3$
1Q+
#1025
0Q+
#1028
b00000000010100000000010100010011 #,
b00000000000000000000000001100110 +,
b0001100110 [,
#1030
b00000000010100000000010100010011 3$
1Q+
#1035
0Q+
#1038
b01100110100100000001000011101111 #,
b00000000000000000000000001100111 +,
b0001100111 [,
#1040
b01100110100100000001000011101111 3$
1Q+
#1045
0Q+
#1048
13,
#1050
1Q#
1Q+
#1055
0Q+
#1058
03,
#1060
1M%
1Q+
#1065
0Q+
#1068
#1070
1C$
1Q+
#1075
0Q+
#1078
#1080
b00000000000000000000000001000000 -!
1K$
b001 U%
b00000100000000000000000001101111 e%
b0000010 }%
b000010 O&
b0000100000 o&
1Q+
#1085
0Q+
#1088
#1090
1k
1{
b00000000000000000000000000000000 -!
b00000000000000000000000000000100 W"
0K$
b010 U%
b00000000000000000000000001000000 !'
1Q+
#1095
0Q+
#1098
#1100
0k
b00000000000000000000000001000000 5!
b11 U!
1u!
b00000000000000000000000001000000 '"
1/"
17"
b00000000000000000000000001000000 _"
b00000000000000000000000001000000 g"
b00000000000000000000000001000000 o"
b00000000000000000000000001000000 w"
1c$
0{$
1%%
1-%
b00000000000000000000000001000000 5%
b011 U%
b00000000000000000000000000000000 !'
1Q+
#1105
0Q+
#1108
#1110
0{
b00000000000000000000000000000000 5!
b00 U!
0u!
0/"
07"
b00000000000000000000000000000000 W"
b00000000000000000000000000000000 _"
b00000000000000000000000000000000 g"
b00000000000000000000000000000000 o"
b00000000000000000000000000000000 w"
b00000000000000000000000001000000 I#
0C$
0c$
1{$
0%%
0-%
b00000000000000000000000000000000 5%
b00000000000000000000000001000100 E%
b000 U%
1Q+
#1115
0Q+
#1118
#1120
b00000001100000001101100010010011 +
b00000001100000001101100010010011 #$
b0001000000 +$
1C$
1Q+
#1125
0Q+
#1128
#1130
b00001 S
b11000 [
b00000000000000000000000000011000 -!
1K$
b001 U%
b00000001100000001101100010010011 e%
b0000000 }%
b10001 '&
b101 7&
1G&
b000000 O&
b1000 W&
b00001101 _&
b0000001100 o&
1Q+
#1135
0Q+
#1138
#1140
b00000 S
b00000 [
b0101 s
b00000000000000000000000000000000 -!
0K$
b010 U%
b00000000000000000000000000011000 !'
1Q+
#1145
0Q+
#1148
#1150
b10001 c
1k
b0000 s
b00000000000000001101000000011000 5!
b10 U!
1u!
b00000000000000001101000001011000 '"
1/"
17"
0{$
1%%
1-%
b011 U%
b00000000000000000000000000000000 !'
1Q+
#1155
0Q+
#1158
#1160
b00000 c
0k
b00000000000000000000000000000000 5!
b00 U!
0u!
b00000000000000000000000001000100 '"
0/"
07"
b00000000000000000000000001000100 I#
0C$
1{$
0%%
0-%
b00000000000000000000000001001000 E%
b000 U%
1Q+
#1165
0Q+
#1168
#1170
b01111111111100001100101010010011 +
b01111111111100001100101010010011 #$
b0001000100 +$
1C$
1Q+
#1175
0Q+
#1178
#1180
b00001 S
b11111 [
b00000000000000000000011111111111 -!
1K$
b001 U%
b01111111111100001100101010010011 e%
b0111111 }%
b10101 '&
b100 7&
b111111 O&
b1010 W&
b00001100 _&
1g&
b1111111111 o&
1Q+
#1185
0Q+
#1188
#1190
b00000 S
b00000 [
b0100 s
b00000000000000000000000000000000 -!
0K$
b010 U%
b00000000000000000000011111111111 !'
1Q+
#1195
0Q+
#1198
#1200
b10101 c
1k
b0000 s
b00000000000000001100111111111110 5!
b11 U!
1u!
b00000000000000001101000001000010 '"
1/"
17"
b00000000000000000000011111111111 W"
b00000000000000000000011111111111 _"
b00000000000000000000011111111111 g"
b00000000000000000000011111111111 o"
b00000000000000000000011111111111 w"
0{$
1%%
1-%
b00000000000000000000011111111111 5%
b011 U%
b00000000000000000000000000000000 !'
1Q+
#1205
0Q+
#1208
#1210
b00000 c
0k
b00000000000000000000000000000000 5!
b00 U!
0u!
b00000000000000000000000001001000 '"
0/"
07"
b00000000000000000000000000000000 W"
b00000000000000000000000000000000 _"
b00000000000000000000000000000000 g"
b00000000000000000000000000000000 o"
b00000000000000000000000000000000 w"
b00000000000000000000000001001000 I#
0C$
1{$
0%%
0-%
b00000000000000000000000000000000 5%
b00000000000000000000000001001100 E%
b000 U%
b00000000000000000000011111111111 s(
1Q+
#1215
0Q+
#1218
#1220
b10000000000000001111100110010011 +
b10000000000000001111100110010011 #$
b0001001000 +$
1C$
1Q+
#1225
0Q+
#1228
#1230
b00001 S
b11111111111111111111100000000000 -!
1K$
b001 U%
b10000000000000001111100110010011 e%
b1000000 }%
b10011 '&
b111 7&
1?&
b000000 O&
b1001 W&
b00001111 _&
0g&
b0000000000 o&
1Q+
#1235
0Q+
#1238
#1240
b00000 S
b0111 s
b00000000000000000000000000000000 -!
0K$
b010 U%
b11111111111111111111100000000000 !'
1Q+
#1245
0Q+
#1248
#1250
b10011 c
1k
b0000 s
b11111111111100001111000000000000 5!
1u!
b11111111111100001111000001001000 '"
0{$
1%%
b011 U%
b00000000000000000000000000000000 !'
1Q+
#1255
0Q+
