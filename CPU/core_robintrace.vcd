$version Generated by VerilatedVcd $end
$date Wed Oct 27 10:11:23 2021
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 3( clock $end
  $var wire 32 C( io_INSTRUCTION [31:0] $end
  $var wire  1 S( io_INSTRUCTION_LOADED $end
  $var wire 32 [( io_PC [31:0] $end
  $var wire  1 K( io_RECIEVED $end
  $var wire  1 s( io_mem_write $end
  $var wire 32 %) io_mem_write_address [31:0] $end
  $var wire  8 {( io_mem_write_data [7:0] $end
  $var wire 32 c( io_rdAddr [31:0] $end
  $var wire  8 k( io_rdData [7:0] $end
  $var wire  1 ;( reset $end
  $scope module core_robin $end
   $var wire 32 1# PC [31:0] $end
   $var wire  1 5! branchCheck $end
   $var wire 32 %! branchImmBranchAddr [31:0] $end
   $var wire  1 3( clock $end
   $var wire  1 =! conditionalBranching $end
   $var wire  1 3( controlStore_clock $end
   $var wire  4 ; controlStore_io_ALU_OP [3:0] $end
   $var wire  1 O" controlStore_io_BRANCH_ADDRESS_SOURCE_ALU $end
   $var wire  1 G" controlStore_io_BRANCH_CONDITION $end
   $var wire 32 [ controlStore_io_BRANCH_IMMEDIATE [31:0] $end
   $var wire  2 s controlStore_io_BRANCH_SELECT [1:0] $end
   $var wire  1 /" controlStore_io_CHOOSE_IMMEDIATE $end
   $var wire  1 K controlStore_io_CHOOSE_MEMORY_LOAD $end
   $var wire  1 _" controlStore_io_CHOOSE_PC $end
   $var wire  1 c controlStore_io_DATA_IN $end
   $var wire 32 S controlStore_io_IMMEDIATE [31:0] $end
   $var wire 32 C( controlStore_io_INSTRUCTION [31:0] $end
   $var wire  1 S( controlStore_io_INSTRUCTION_LOADED $end
   $var wire  1 C controlStore_io_PROCEDURE_BRANCHING $end
   $var wire  5 + controlStore_io_RD [4:0] $end
   $var wire  1 '" controlStore_io_RECIEVED $end
   $var wire  5 }! controlStore_io_RS1 [4:0] $end
   $var wire  5 # controlStore_io_RS2 [4:0] $end
   $var wire  1 k controlStore_io_STORE_ADDRESS_IN $end
   $var wire  1 7" controlStore_io_STORE_READY $end
   $var wire  2 ?" controlStore_io_STORE_SIZE [1:0] $end
   $var wire  1 W" controlStore_io_UPDATE_PC $end
   $var wire  1 3 controlStore_io_WRITE_EN $end
   $var wire  1 ;( controlStore_reset $end
   $var wire  1 3( dataPath_clock $end
   $var wire  4 ; dataPath_io_ALU_OP [3:0] $end
   $var wire  1 /" dataPath_io_CHOOSE_IMMEDIATE $end
   $var wire  1 K dataPath_io_CHOOSE_MEMORY_LOAD $end
   $var wire  1 _" dataPath_io_CHOOSE_PC $end
   $var wire  1 g" dataPath_io_EQUAL $end
   $var wire 32 S dataPath_io_IMMEDIATE [31:0] $end
   $var wire  1 o" dataPath_io_LESS_THAN $end
   $var wire 32 1# dataPath_io_PC [31:0] $end
   $var wire  1 C dataPath_io_PROCEDURE_BRANCHING $end
   $var wire  5 + dataPath_io_RD [4:0] $end
   $var wire  5 }! dataPath_io_RS1 [4:0] $end
   $var wire  5 # dataPath_io_RS2 [4:0] $end
   $var wire  1 w" dataPath_io_SIGNED_LESS_THAN $end
   $var wire  1 3 dataPath_io_WRITE_EN $end
   $var wire 32 !# dataPath_io_instruction_next_address [31:0] $end
   $var wire 32 )# dataPath_io_instruction_return_address [31:0] $end
   $var wire 32 !# dataPath_io_store_address [31:0] $end
   $var wire 32 { dataPath_io_store_data [31:0] $end
   $var wire  1 ;( dataPath_reset $end
   $var wire 32 C( io_INSTRUCTION [31:0] $end
   $var wire  1 S( io_INSTRUCTION_LOADED $end
   $var wire 32 [( io_PC [31:0] $end
   $var wire  1 K( io_RECIEVED $end
   $var wire  1 s( io_mem_write $end
   $var wire 32 %) io_mem_write_address [31:0] $end
   $var wire  8 {( io_mem_write_data [7:0] $end
   $var wire 32 c( io_rdAddr [31:0] $end
   $var wire  8 k( io_rdData [7:0] $end
   $var wire  1 -! lessThanGreaterThanALUResult $end
   $var wire 32 )# noBranchNextAddr [31:0] $end
   $var wire  1 ;( reset $end
   $var wire  1 3( storeUnit_clock $end
   $var wire  1 k storeUnit_io_ADDRESS_IN $end
   $var wire  1 c storeUnit_io_DATA_IN $end
   $var wire  1 7" storeUnit_io_STORE_READY $end
   $var wire  2 ?" storeUnit_io_STORE_SIZE [1:0] $end
   $var wire  1 I# storeUnit_io_mem_write $end
   $var wire 32 A# storeUnit_io_mem_write_address [31:0] $end
   $var wire  8 9# storeUnit_io_mem_write_data [7:0] $end
   $var wire 32 !# storeUnit_io_store_address [31:0] $end
   $var wire 32 { storeUnit_io_store_data [31:0] $end
   $var wire  1 ;( storeUnit_reset $end
   $scope module controlStore $end
    $var wire  1 q# LOAD_READY $end
    $var wire  1 '" RECIEVED $end
    $var wire  1 i# STORE_READY $end
    $var wire  1 3( clock $end
    $var wire  7 y# hi [6:0] $end
    $var wire  1 +$ hi_1 $end
    $var wire  4 ;$ hi_3 [3:0] $end
    $var wire  1 S$ hi_7 $end
    $var wire  1 c$ hi_9 $end
    $var wire 32 a# instruction [31:0] $end
    $var wire  4 ; io_ALU_OP [3:0] $end
    $var wire  1 O" io_BRANCH_ADDRESS_SOURCE_ALU $end
    $var wire  1 G" io_BRANCH_CONDITION $end
    $var wire 32 [ io_BRANCH_IMMEDIATE [31:0] $end
    $var wire  2 s io_BRANCH_SELECT [1:0] $end
    $var wire  1 /" io_CHOOSE_IMMEDIATE $end
    $var wire  1 K io_CHOOSE_MEMORY_LOAD $end
    $var wire  1 _" io_CHOOSE_PC $end
    $var wire  1 c io_DATA_IN $end
    $var wire 32 S io_IMMEDIATE [31:0] $end
    $var wire 32 C( io_INSTRUCTION [31:0] $end
    $var wire  1 S( io_INSTRUCTION_LOADED $end
    $var wire  1 C io_PROCEDURE_BRANCHING $end
    $var wire  5 + io_RD [4:0] $end
    $var wire  1 '" io_RECIEVED $end
    $var wire  5 }! io_RS1 [4:0] $end
    $var wire  5 # io_RS2 [4:0] $end
    $var wire  1 k io_STORE_ADDRESS_IN $end
    $var wire  1 7" io_STORE_READY $end
    $var wire  2 ?" io_STORE_SIZE [1:0] $end
    $var wire  1 W" io_UPDATE_PC $end
    $var wire  1 3 io_WRITE_EN $end
    $var wire  5 #$ lo [4:0] $end
    $var wire  1 3$ lo_1 $end
    $var wire  6 C$ lo_2 [5:0] $end
    $var wire  8 K$ lo_4 [7:0] $end
    $var wire 10 [$ lo_5 [9:0] $end
    $var wire  3 k$ lo_7 [2:0] $end
    $var wire  1 ;( reset $end
    $var wire  3 Y# stallState [2:0] $end
    $var wire  3 Q# stateReg [2:0] $end
   $upscope $end
   $scope module dataPath $end
    $var wire 32 s$ ALU_in1 [31:0] $end
    $var wire 32 {$ ALU_in2 [31:0] $end
    $var wire  1 3( clock $end
    $var wire  1 3( cpuALU_clock $end
    $var wire  4 ; cpuALU_io_ALU_OP [3:0] $end
    $var wire 32 s$ cpuALU_io_ALUinput1 [31:0] $end
    $var wire 32 {$ cpuALU_io_ALUinput2 [31:0] $end
    $var wire 32 !# cpuALU_io_ALUoutput [31:0] $end
    $var wire  1 g" cpuALU_io_EQUAL $end
    $var wire  1 o" cpuALU_io_LESS_THAN $end
    $var wire  1 w" cpuALU_io_SIGNED_LESS_THAN $end
    $var wire  1 ;( cpuALU_reset $end
    $var wire  4 ; io_ALU_OP [3:0] $end
    $var wire  1 /" io_CHOOSE_IMMEDIATE $end
    $var wire  1 K io_CHOOSE_MEMORY_LOAD $end
    $var wire  1 _" io_CHOOSE_PC $end
    $var wire  1 g" io_EQUAL $end
    $var wire 32 S io_IMMEDIATE [31:0] $end
    $var wire  1 o" io_LESS_THAN $end
    $var wire 32 1# io_PC [31:0] $end
    $var wire  1 C io_PROCEDURE_BRANCHING $end
    $var wire  5 + io_RD [4:0] $end
    $var wire  5 }! io_RS1 [4:0] $end
    $var wire  5 # io_RS2 [4:0] $end
    $var wire  1 w" io_SIGNED_LESS_THAN $end
    $var wire  1 3 io_WRITE_EN $end
    $var wire 32 !# io_instruction_next_address [31:0] $end
    $var wire 32 )# io_instruction_return_address [31:0] $end
    $var wire 32 !# io_store_address [31:0] $end
    $var wire 32 { io_store_data [31:0] $end
    $var wire 32 U! rdData [31:0] $end
    $var wire  1 3( registerFile_clock $end
    $var wire  5 + registerFile_io_RD [4:0] $end
    $var wire  5 }! registerFile_io_RS1 [4:0] $end
    $var wire  5 # registerFile_io_RS2 [4:0] $end
    $var wire  1 3 registerFile_io_WRITE_EN $end
    $var wire 32 M! registerFile_io_rdData [31:0] $end
    $var wire 32 m! registerFile_io_rs1Data [31:0] $end
    $var wire 32 E! registerFile_io_rs2Data [31:0] $end
    $var wire  1 ;( reset $end
    $var wire 32 u! rs1_ALU [31:0] $end
    $var wire 32 ]! rs2_ALU [31:0] $end
    $var wire 32 e! rs2_ALU_rd [31:0] $end
    $scope module cpuALU $end
     $var wire 32 !# ALUoutput [31:0] $end
     $var wire  1 g" EQUAL $end
     $var wire  1 o" LESS_THAN $end
     $var wire  1 w" SIGNED_LESS_THAN $end
     $var wire  1 3( clock $end
     $var wire  4 ; io_ALU_OP [3:0] $end
     $var wire 32 s$ io_ALUinput1 [31:0] $end
     $var wire 32 {$ io_ALUinput2 [31:0] $end
     $var wire 32 !# io_ALUoutput [31:0] $end
     $var wire  1 g" io_EQUAL $end
     $var wire  1 o" io_LESS_THAN $end
     $var wire  1 w" io_SIGNED_LESS_THAN $end
     $var wire  1 ;( reset $end
    $upscope $end
    $scope module registerFile $end
     $var wire  1 3( clock $end
     $var wire  5 + io_RD [4:0] $end
     $var wire  5 }! io_RS1 [4:0] $end
     $var wire  5 # io_RS2 [4:0] $end
     $var wire  1 3 io_WRITE_EN $end
     $var wire 32 M! io_rdData [31:0] $end
     $var wire 32 m! io_rs1Data [31:0] $end
     $var wire 32 E! io_rs2Data [31:0] $end
     $var wire 32 %% registerFile_0 [31:0] $end
     $var wire 32 -% registerFile_1 [31:0] $end
     $var wire 32 u% registerFile_10 [31:0] $end
     $var wire 32 }% registerFile_11 [31:0] $end
     $var wire 32 '& registerFile_12 [31:0] $end
     $var wire 32 /& registerFile_13 [31:0] $end
     $var wire 32 7& registerFile_14 [31:0] $end
     $var wire 32 ?& registerFile_15 [31:0] $end
     $var wire 32 G& registerFile_16 [31:0] $end
     $var wire 32 O& registerFile_17 [31:0] $end
     $var wire 32 W& registerFile_18 [31:0] $end
     $var wire 32 _& registerFile_19 [31:0] $end
     $var wire 32 5% registerFile_2 [31:0] $end
     $var wire 32 g& registerFile_20 [31:0] $end
     $var wire 32 o& registerFile_21 [31:0] $end
     $var wire 32 w& registerFile_22 [31:0] $end
     $var wire 32 !' registerFile_23 [31:0] $end
     $var wire 32 )' registerFile_24 [31:0] $end
     $var wire 32 1' registerFile_25 [31:0] $end
     $var wire 32 9' registerFile_26 [31:0] $end
     $var wire 32 A' registerFile_27 [31:0] $end
     $var wire 32 I' registerFile_28 [31:0] $end
     $var wire 32 Q' registerFile_29 [31:0] $end
     $var wire 32 =% registerFile_3 [31:0] $end
     $var wire 32 Y' registerFile_30 [31:0] $end
     $var wire 32 a' registerFile_31 [31:0] $end
     $var wire 32 E% registerFile_4 [31:0] $end
     $var wire 32 M% registerFile_5 [31:0] $end
     $var wire 32 U% registerFile_6 [31:0] $end
     $var wire 32 ]% registerFile_7 [31:0] $end
     $var wire 32 e% registerFile_8 [31:0] $end
     $var wire 32 m% registerFile_9 [31:0] $end
    $upscope $end
   $upscope $end
   $scope module storeUnit $end
    $var wire  1 3( clock $end
    $var wire  1 k io_ADDRESS_IN $end
    $var wire  1 c io_DATA_IN $end
    $var wire  1 7" io_STORE_READY $end
    $var wire  2 ?" io_STORE_SIZE [1:0] $end
    $var wire  1 I# io_mem_write $end
    $var wire 32 A# io_mem_write_address [31:0] $end
    $var wire  8 9# io_mem_write_data [7:0] $end
    $var wire 32 !# io_store_address [31:0] $end
    $var wire 32 { io_store_data [31:0] $end
    $var wire  1 ;( reset $end
    $var wire  1 +( stateReg $end
    $var wire 32 i' store_data_buffer [31:0] $end
    $var wire 32 y' store_data_buffer_address [31:0] $end
    $var wire  2 q' store_data_size_buffer [1:0] $end
    $var wire  1 #( storing $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#8
b00000 #
b00000 +
03
b0000 ;
0C
0K
b00000000000000000000000000000000 S
b00000000000000000000000000000000 [
0c
0k
b01 s
b00000000000000000000000000000000 {
b00000000000000000000000000000000 %!
0-!
05!
0=!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 m!
b00000000000000000000000000000000 u!
b00000 }!
0'"
0/"
17"
b01 ?"
0G"
0O"
0W"
0_"
0g"
0o"
0w"
b00000000000000000000000000000000 !#
b00000000000000000000000000000100 )#
b00000000000000000000000000000000 1#
b00000000 9#
b00000000000000000000000000000000 A#
1I#
b000 Q#
b000 Y#
b00000000000000000000000000000000 a#
0i#
0q#
b0000000 y#
b00000 #$
0+$
03$
b0000 ;$
b000000 C$
b00000000 K$
0S$
b0000000000 [$
0c$
b000 k$
b00000000000000000000000000000000 s$
b00000000000000000000000000000000 {$
b00000000000000000000000000000000 %%
b00000000000000000000000000000000 -%
b00000000000000000000000000000000 5%
b00000000000000000000000000000000 =%
b00000000000000000000000000000000 E%
b00000000000000000000000000000000 M%
b00000000000000000000000000000000 U%
b00000000000000000000000000000000 ]%
b00000000000000000000000000000000 e%
b00000000000000000000000000000000 m%
b00000000000000000000000000000000 u%
b00000000000000000000000000000000 }%
b00000000000000000000000000000000 '&
b00000000000000000000000000000000 /&
b00000000000000000000000000000000 7&
b00000000000000000000000000000000 ?&
b00000000000000000000000000000000 G&
b00000000000000000000000000000000 O&
b00000000000000000000000000000000 W&
b00000000000000000000000000000000 _&
b00000000000000000000000000000000 g&
b00000000000000000000000000000000 o&
b00000000000000000000000000000000 w&
b00000000000000000000000000000000 !'
b00000000000000000000000000000000 )'
b00000000000000000000000000000000 1'
b00000000000000000000000000000000 9'
b00000000000000000000000000000000 A'
b00000000000000000000000000000000 I'
b00000000000000000000000000000000 Q'
b00000000000000000000000000000000 Y'
b00000000000000000000000000000000 a'
b00000000000000000000000000000000 i'
b00 q'
b00000000000000000000000000000000 y'
0#(
0+(
03(
0;(
b11111111100100000000100110010011 C(
0K(
1S(
b00000000000000000000000000000000 [(
b00000000000000000000000000000000 c(
b00000000 k(
1s(
b00000000 {(
b00000000000000000000000000000000 %)
#10
b11001 #
b11111111111111111111111111111001 S
b11111111111100000000111111111000 [
b11111111111100000000111111111000 %!
1'"
1/"
1g"
b00000000000000000000000000000001 A#
b001 Q#
b11111111100100000000100110010011 a#
1i#
1q#
b1111111 y#
b10011 #$
1+$
13$
b1001 ;$
b111111 C$
1S$
b1111111100 [$
b01 q'
b00000000000000000000000000000001 y'
13(
1K(
b00000000000000000000000000000001 %)
#15
03(
#18
0S(
#20
b00000 #
b00000000000000000000000000000000 S
b00000000000000000000000000000000 [
b00000000000000000000000000000000 %!
0'"
0/"
1W"
b00000000000000000000000000000010 A#
b010 Q#
b11111111111111111111111111111001 {$
b10 q'
b00000000000000000000000000000010 y'
13(
0K(
b00000000000000000000000000000010 %)
#25
03(
#28
#30
b10011 +
13
b00000000000000000000000000000100 %!
b11111111111111111111111111111001 M!
b11111111111111111111111111111001 U!
b11111111111111111111111111111001 ]!
b11111111111111111111111111111001 e!
b11111111111111111111111111111001 u!
0W"
0g"
1o"
b11111111111111111111111111111001 !#
b00000000000000000000000000001000 )#
b00000000000000000000000000000100 1#
b00000000000000000000000000000011 A#
b011 Q#
b00000000000000000000000000000000 {$
b11 q'
b00000000000000000000000000000011 y'
13(
b00000000000000000000000000000100 [(
b00000000000000000000000000000011 %)
#35
03(
#38
#40
b00000 +
03
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 U!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 e!
b00000000000000000000000000000000 u!
1g"
0o"
b00000000000000000000000000000000 !#
b00000000000000000000000000000000 A#
0I#
b000 Q#
b11111111111111111111111111111001 _&
b00000000000000000000000000000100 y'
1#(
13(
0s(
b00000000000000000000000000000000 %)
#45
03(
#48
#50
13(
#55
03(
#58
#60
13(
#65
03(
#68
#70
13(
#75
03(
#78
#80
13(
#85
03(
#88
#90
13(
#95
03(
#98
#100
13(
#105
03(
#108
#110
13(
#115
03(
#118
#120
13(
#125
03(
#128
#130
13(
#135
03(
#138
#140
13(
#145
03(
#148
#150
13(
#155
03(
#158
#160
13(
#165
03(
#168
#170
13(
#175
03(
#178
#180
13(
#185
03(
#188
#190
13(
#195
03(
#198
#200
13(
#205
03(
#208
#210
13(
#215
03(
